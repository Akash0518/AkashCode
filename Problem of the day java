// You are using Java
import java.util.Scanner;

class Node {
    int data;
    Node prev;
    Node next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    Node head;

    public DoublyLinkedList() {
        this.head = null;
    }

    public void insertAtFront(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
    }

    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
   

} else {
Node temp = head;
while (temp.next != null) {
temp = temp.next;
}
temp.next = newNode;
newNode.prev = temp;
}
}

public void insertAtPosition(int pos, int data) {
if (pos < 1) {
return;
}
if (pos == 1) {
insertAtFront(data);
return;
}
Node newNode = new Node(data);
Node temp = head;
for (int i = 1; i < pos - 1 && temp != null; i++) {
temp = temp.next;
}
if (temp == null) {
return;
}
newNode.next = temp.next;
if (temp.next != null) {
temp.next.prev = newNode;
}
temp.next = newNode;
newNode.prev = temp;
}

public void deleteFirst() {
if (head == null) {
return;
}
head = head.next;
if (head != null) {
head.prev = null;
}
}

public void deleteEnd() {
if (head == null) {
return;
}
if (head.next == null) {
head = null;
return;
}
Node temp = head;
while (temp.next != null) {
temp = temp.next;
}
temp.prev.next = null;
}

public void deletePosition(int pos) {
if (pos < 1 || head == null) {
return;
}
if (pos == 1) {
deleteFirst();
return;
}


Node temp = head;
for (int i = 1; i < pos && temp != null; i++) {
temp = temp.next;
}
if (temp == null) {
return;
}
temp.prev.next = temp.next;
if (temp.next != null) {
temp.next.prev = temp.prev;
}
}

public void search(int value) {
Node temp = head;
while (temp != null) {
if (temp.data == value) {
return;
}
temp = temp.next;
}
System.out.println("The element "+ value+ "is not found in the list");
}

public void traverse() {
Node temp = head;
while (temp != null) {
System.out.print(temp.data + " ");
temp = temp.next;
}
System.out.println();
}
}

public class Main {
public static void main(String[] args) {
DoublyLinkedList dll = new DoublyLinkedList();
Scanner scanner = new Scanner(System.in);
int choice;
while (true) {

choice = scanner.nextInt();

switch (choice) {
case 1:
int data1 = scanner.nextInt();
dll.insertAtFront(data1);
break;
case 2:
int data2 = scanner.nextInt();
dll.insertAtEnd(data2);
break;
case 3:
int pos = scanner.nextInt();
int data3 = scanner.nextInt();
dll.insertAtPosition(pos, data3);
System.out.println("Node Inserted");
break;
case 4:
dll.deleteFirst();
break;
case 5:
dll.deleteEnd();
break;
case 6:
int posDelete = scanner.nextInt();
dll.deletePosition(posDelete);
break;
case 7:
int value = scanner.nextInt();
dll.search(value);
break;
case 8:
dll.traverse();
break;
case 9:
System.exit(0);
default:
System.out.println("Wrong choice");
}
}
}
}
